[{"D:\\React Project\\company_profile\\src\\index.js":"1","D:\\React Project\\company_profile\\src\\reportWebVitals.js":"2","D:\\React Project\\company_profile\\src\\App.js":"3","D:\\React Project\\company_profile\\src\\Components\\Navbar.jsx":"4","D:\\React Project\\company_profile\\src\\Screens\\Dashboard.jsx":"5","D:\\React Project\\company_profile\\src\\Components\\Login.jsx":"6","D:\\React Project\\company_profile\\src\\Components\\Register.jsx":"7","D:\\React Project\\company_profile\\src\\Screens\\CareerMenu.jsx":"8","D:\\React Project\\company_profile\\src\\Screens\\ProfileMenu.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":6497,"mtime":1609828626976,"results":"13","hashOfConfig":"11"},{"size":4211,"mtime":1609823004779,"results":"14","hashOfConfig":"11"},{"size":9818,"mtime":1609833203876,"results":"15","hashOfConfig":"11"},{"size":6188,"mtime":1609822272851,"results":"16","hashOfConfig":"11"},{"size":7428,"mtime":1609819566048,"results":"17","hashOfConfig":"11"},{"size":22577,"mtime":1609830981310,"results":"18","hashOfConfig":"11"},{"size":7736,"mtime":1609823901551,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pr9iyl",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React Project\\company_profile\\src\\index.js",[],"D:\\React Project\\company_profile\\src\\reportWebVitals.js",[],"D:\\React Project\\company_profile\\src\\App.js",[],"D:\\React Project\\company_profile\\src\\Components\\Navbar.jsx",[],"D:\\React Project\\company_profile\\src\\Screens\\Dashboard.jsx",["40","41","42","43"],"D:\\React Project\\company_profile\\src\\Components\\Login.jsx",[],["44","45"],"D:\\React Project\\company_profile\\src\\Components\\Register.jsx",[],"D:\\React Project\\company_profile\\src\\Screens\\CareerMenu.jsx",["46"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {\r\n    useState,\r\n    useEffect\r\n} from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { MDBDataTable } from 'mdbreact';\r\n\r\nconst CareerMenu = () => {\r\n    const [tableJob, setTableJob] = useState('')\r\n    const [idJob, setIdJob] = useState('')\r\n    const [jobposition, setJobPosition] = useState('')\r\n    const [joblocation, setJobLocation] = useState('')\r\n    const [jobdescription, setJobDescription] = useState('')\r\n    const [joblink, setJobLink] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const MySwal = withReactContent(Swal)\r\n    const URL_API = `http://localhost:8000`\r\n\r\n    const fetchJob = async () => {\r\n        try {\r\n            const fetchApiJob = await fetch(`${URL_API}/job`, {\r\n                method: 'GET',\r\n            })\r\n            const jobdata = await fetchApiJob.json()\r\n            console.log(jobdata.result)\r\n            dataTableJob(jobdata.result)\r\n        } catch (error) {\r\n            console.log('error')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchJob().then(() => {\r\n            setLoading(true)\r\n        });\r\n    }, [])\r\n\r\n    // Setting the data table\r\n    const dataTableJob = job => {\r\n        let rowsData = []\r\n\r\n        for (var index = 0; index < job.length; index++) {\r\n            let rowItem = {}\r\n            rowItem[\"no\"] = index + 1\r\n            rowItem[\"job_position\"] = job[index].job_position\r\n            rowItem[\"job_location\"] = job[index].job_location\r\n            rowItem[\"job_description\"] = job[index].job_description\r\n            rowItem[\"job_link\"] = job[index].job_link\r\n            rowItem[\"action\"] =\r\n                <>\r\n                    <button style={{ marginRight: \"10px\", width: \"45%\", height: \"35px\" }} onClick={event => getIdJob(event)} data-toggle=\"modal\" data-target=\"#editModal\" className=\"btn btn-primary\" type=\"button\" id={job[index].id} ><i className=\"mdi mdi-table-edit\" style={{ marginRight: \"10px\" }} />Edit</button>\r\n                    <button onClick={e => deleteJob(e)} style={{ marginRight: \"10px\", width: \"45%\", height: \"35px\" }} className=\"btn btn-danger\" type=\"button\" id={job[index].id} ><i className=\"mdi mdi-delete\" style={{ marginRight: \"10px\" }} />Delete</button>\r\n                </>\r\n            rowsData.push(rowItem)\r\n        }\r\n\r\n        setTableJob(rowsData)\r\n    }\r\n\r\n    // Data job\r\n    const dataJob = (data) => {\r\n        return {\r\n            columns: [\r\n                {\r\n                    label: 'No',\r\n                    field: 'no',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Job Position',\r\n                    field: 'job_position',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Job Location',\r\n                    field: 'job_location',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Job Description',\r\n                    field: 'job_description',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Job Link',\r\n                    field: 'job_link',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Action',\r\n                    field: 'action',\r\n                    sort: 'asc'\r\n                },\r\n            ],\r\n            rows: data\r\n        }\r\n    }\r\n\r\n    // handle submit add job\r\n    const handleSubmit = async e => {\r\n        console.log(\r\n            jobposition,\r\n            joblink,\r\n            jobdescription,\r\n            joblocation\r\n        )\r\n        e.preventDefault();\r\n        try {\r\n            const fetchApi = await fetch(`${URL_API}/job/store`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    jobposition,\r\n                    jobdescription,\r\n                    joblocation,\r\n                    joblink\r\n                }),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            })\r\n            const create = await fetchApi.json()\r\n            console.log(create)\r\n            if (create.success) {\r\n                MySwal.fire({\r\n                    icon: 'success',\r\n                    title: 'Succes Add Data Job',\r\n                    toast: true,\r\n                    position: 'top-end',\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                    timerProgressBar: true,\r\n                    didOpen: (toast) => {\r\n                        toast.addEventListener('mouseenter', Swal.stopTimer)\r\n                        toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n                    }\r\n                }).then(function () {\r\n                    setJobPosition('')\r\n                    setJobLocation('')\r\n                    setJobDescription('')\r\n                    setJobLink('')\r\n                    fetchJob().then(() => {\r\n                        setLoading(true)\r\n                    });\r\n                    window.$('#addModal').modal('hide')\r\n                    MySwal.fire({\r\n                        title: 'Loading...',\r\n                        timer: 1000,\r\n                        didOpen: () => {\r\n                            MySwal.showLoading()\r\n                        },\r\n                    })\r\n                })\r\n            }\r\n        } catch (error) {\r\n            MySwal.fire({\r\n                icon: 'error',\r\n                title: 'There is an error!',\r\n                html:\r\n                    '<ul> ' +\r\n                    '<li><p style=\"color: red;\">there are columns that have not been filled</p></li> ' +\r\n                    '</ul > '\r\n            })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Get id job\r\n    const getIdJob = async e => {\r\n        try {\r\n            const data = await fetch(`${URL_API}/job/get/${e.target.id}`, {\r\n                method: 'GET'\r\n            })\r\n            const result = await data.json()\r\n            console.log(result)\r\n            setIdJob(result.data.id)\r\n            setJobPosition(result.data.job_position)\r\n            setJobLocation(result.data.job_location)\r\n            setJobDescription(result.data.job_description)\r\n            setJobLink(result.data.job_link)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleEdit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const updateJob = await fetch(`${URL_API}/job/update/${idJob}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify({\r\n                    jobposition,\r\n                    jobdescription,\r\n                    joblocation,\r\n                    joblink\r\n                }),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            })\r\n            const update = await updateJob.json()\r\n            if (update.success) {\r\n                MySwal.fire({\r\n                    icon: 'success',\r\n                    title: 'Succes Edit Data Job',\r\n                    toast: true,\r\n                    position: 'top-end',\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                    timerProgressBar: true,\r\n                    didOpen: (toast) => {\r\n                        toast.addEventListener('mouseenter', Swal.stopTimer)\r\n                        toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n                    }\r\n                }).then(function () {\r\n                    setJobPosition('')\r\n                    setJobLocation('')\r\n                    setJobDescription('')\r\n                    setJobLink('')\r\n                    fetchJob().then(() => {\r\n                        setLoading(true)\r\n                    });\r\n                    window.$('#editModal').modal('hide')\r\n                    MySwal.fire({\r\n                        title: 'Loading...',\r\n                        timer: 1000,\r\n                        didOpen: () => {\r\n                            MySwal.showLoading()\r\n                        },\r\n                    })\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Delete job\r\n    const deleteJob = (e) => {\r\n        const id = e.target.id\r\n        console.log(id)\r\n        MySwal.fire({\r\n            title: 'Are you sure to delete this data?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, delete it!'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                MySwal.fire(\r\n                    'Deleted!',\r\n                    'Data Siswa has been deleted.',\r\n                    'success'\r\n                ).then(async () => {\r\n                    try {\r\n                        const siswaDelete = await fetch(`${URL_API}/job/delete/${id}`, {\r\n                            method: 'DELETE'\r\n                        })\r\n                        await siswaDelete\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                    }\r\n                }).then(function () {\r\n                    fetchJob().then(() => {\r\n                        setLoading(true)\r\n                    });\r\n                    MySwal.fire({\r\n                        title: 'Loading...',\r\n                        timer: 1000,\r\n                        didOpen: () => {\r\n                            MySwal.showLoading()\r\n                        },\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    if (loading) {\r\n        MySwal.close()\r\n        return (\r\n            <>\r\n                <div className=\"page-header\">\r\n                    <h3 className=\"page-title\"> Career Menu </h3>\r\n                    <nav aria-label=\"breadcrumb\">\r\n                        <ol className=\"breadcrumb\">\r\n                            <li className=\"breadcrumb-item\"><a href=\"dashboard\">Dashboard</a></li>\r\n                            <li className=\"breadcrumb-item active\" aria-current=\"page\">Career Menu</li>\r\n                        </ol>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"row\" style={{ marginBottom: \"125px\" }}>\r\n                    {/* Area Table Siswa */}\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <div className=\"card shadow mb-4\">\r\n                            {/* Card Header - Dropdown */}\r\n                            <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                                <h6 className=\"m-0 font-weight-bold text-primary\">Data Job Hiring</h6>\r\n                                <div className=\"dropdown no-arrow\">\r\n                                    <a className=\"dropdown-toggle\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                        <i className=\"fas fa-ellipsis-v fa-sm fa-fw text-gray-400\" />\r\n                                    </a>\r\n                                    <div className=\"dropdown-menu dropdown-menu-right shadow animated--fade-in\" aria-labelledby=\"dropdownMenuLink\">\r\n                                        <div className=\"dropdown-header\">Action:</div>\r\n                                        <a className=\"dropdown-item\" href=\"#\" data-toggle=\"modal\" data-target=\"#addModal\">\r\n                                            <i className=\"mdi mdi-plus\" style={{ marginRight: \"10px\", color: \"green\" }} />\r\n                                            Add Modal\r\n                                            </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* Card Body */}\r\n                            <div className=\"card-body\">\r\n                                <MDBDataTable\r\n                                    style={{ color: \"white\" }}\r\n                                    sortable={false}\r\n                                    striped\r\n                                    data={dataJob(tableJob)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <!-- Add Modal --> */}\r\n                <div className=\"modal fade\" id=\"addModal\" tabIndex={-1} aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Add Modal</h5>\r\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\" style={{ color: \"white\", marginRight: \"10px\" }}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <form onSubmit={e => handleSubmit(e)}>\r\n                                <div className=\"modal-body\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput1\">Job Position</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput1\"\r\n                                            placeholder=\"input job position\"\r\n                                            onChange={e => setJobPosition(e.target.value)}\r\n                                            value={jobposition}\r\n                                            name=\"jobposition\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput2\">Job Location</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput2\"\r\n                                            placeholder=\"input job location\"\r\n                                            onChange={e => setJobLocation(e.target.value)}\r\n                                            value={joblocation}\r\n                                            name=\"joblocation\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput3\">Job Description</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput3\"\r\n                                            placeholder=\"input job description\"\r\n                                            onChange={e => setJobDescription(e.target.value)}\r\n                                            value={jobdescription}\r\n                                            name=\"jobdescription\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput4\">Job Link</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput4\"\r\n                                            placeholder=\"input job link\"\r\n                                            onChange={e => setJobLink(e.target.value)}\r\n                                            value={joblink}\r\n                                            name=\"joblink\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                                    <button type=\"submit\" className=\"btn btn-success\" >Add Data</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <!-- Edit Modal --> */}\r\n                <div className=\"modal fade\" id=\"editModal\" tabIndex={-1} aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Edit Modal</h5>\r\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">×</span>\r\n                                </button>\r\n                            </div>\r\n                            <form onSubmit={e => handleEdit(e)}>\r\n                                <div className=\"modal-body\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput1\">Job Position</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput1\"\r\n                                            placeholder=\"input job position\"\r\n                                            onChange={e => setJobPosition(e.target.value)}\r\n                                            value={jobposition}\r\n                                            name=\"jobposition\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput2\">Job Location</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput2\"\r\n                                            placeholder=\"input job location\"\r\n                                            onChange={e => setJobLocation(e.target.value)}\r\n                                            value={joblocation}\r\n                                            name=\"joblocation\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput3\">Job Description</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput3\"\r\n                                            placeholder=\"input job description\"\r\n                                            onChange={e => setJobDescription(e.target.value)}\r\n                                            value={jobdescription}\r\n                                            name=\"jobdescription\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"exampleFormControlInput4\">Job Link</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"exampleFormControlInput4\"\r\n                                            placeholder=\"input job link\"\r\n                                            onChange={e => setJobLink(e.target.value)}\r\n                                            value={joblink}\r\n                                            name=\"joblink\"\r\n                                            style={{ color: \"white\" }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"modal-footer\">\r\n                                    <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                                    <button type=\"submit\" className=\"btn btn-primary\" >Edit Data</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    } else {\r\n        MySwal.fire({\r\n            title: 'Loading...',\r\n            didOpen: () => {\r\n                MySwal.showLoading()\r\n            },\r\n        })\r\n    }\r\n    return (\r\n        <p></p>\r\n    )\r\n}\r\n\r\nexport default CareerMenu","D:\\React Project\\company_profile\\src\\Screens\\ProfileMenu.jsx",[],{"ruleId":"47","severity":1,"message":"48","line":7,"column":8,"nodeType":"49","messageId":"50","endLine":7,"endColumn":21},{"ruleId":"47","severity":1,"message":"51","line":14,"column":25,"nodeType":"49","messageId":"50","endLine":14,"endColumn":39},{"ruleId":"47","severity":1,"message":"52","line":15,"column":12,"nodeType":"49","messageId":"50","endLine":15,"endColumn":21},{"ruleId":"53","severity":1,"message":"54","line":39,"column":8,"nodeType":"55","endLine":39,"endColumn":10,"suggestions":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"53","severity":1,"message":"61","line":38,"column":8,"nodeType":"55","endLine":38,"endColumn":10,"suggestions":"62"},"no-unused-vars","'ReactPaginate' is defined but never used.","Identifier","unusedVar","'setCurrentPage' is assigned a value but never used.","'pageCount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchContact'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"React Hook useEffect has a missing dependency: 'fetchJob'. Either include it or remove the dependency array.",["66"],{"desc":"67","fix":"68"},"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [fetchContact]",{"range":"71","text":"72"},"Update the dependencies array to be: [fetchJob]",{"range":"73","text":"74"},[1236,1238],"[fetchContact]",[1220,1222],"[fetchJob]"]